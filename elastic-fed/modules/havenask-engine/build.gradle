/*
 * Copyright (c) 2021, Alibaba Group;
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
  }
}

plugins {
  id "com.google.protobuf" version "0.8.18"
}

apply plugin: 'havenask.internal-cluster-test'
apply plugin: 'havenask.java-rest-test'

havenaskplugin {
  description 'Havenask engine module'
  classname 'org.havenask.engine.HavenaskEnginePlugin'
}

tasks.named("dependencyLicenses").configure {
  mapping from: /fastjson-.*/, to: 'fastjson'
}

dependencies {
  api project(":libs:havenask-arpc")
  api 'com.alibaba:fastjson:1.2.83_noneautotype'
  api 'org.apache.commons:commons-lang3:3.4'
  implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.8.0'
  api "org.slf4j:slf4j-api:${versions.slf4j}"
  api "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"
  api project(':client:rest-high-level')
  javaRestTestImplementation project(':modules:havenask-engine')
  testImplementation project(path: ':server', configuration: 'testArtifacts')
}

bundlePlugin {
  from('config') {
    into 'config'
  }
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // classes are missing
          "okhttp3.MediaType",
          "okhttp3.RequestBody",
          "okhttp3.ResponseBody",
          "com.google.common.collect.ArrayListMultimap",
          "com.google.common.collect.Multimap",
          "javax.money.CurrencyUnit",
          "javax.money.Monetary",
          "javax.servlet.ServletOutputStream",
          "javax.servlet.http.HttpServletRequest",
          "javax.servlet.http.HttpServletResponse",
          "javax.ws.rs.WebApplicationException",
          "javax.ws.rs.core.Configuration",
          "javax.ws.rs.core.Feature",
          "javax.ws.rs.core.FeatureContext",
          "javax.ws.rs.core.MediaType",
          "javax.ws.rs.core.MultivaluedMap",
          "javax.ws.rs.core.Response",
          "javax.ws.rs.core.StreamingOutput",
          "javax.ws.rs.ext.ContextResolver",
          "javax.ws.rs.ext.MessageBodyReader",
          "javax.ws.rs.ext.MessageBodyWriter",
          "javax.ws.rs.ext.Providers",
          "org.glassfish.jersey.CommonProperties",
          "org.glassfish.jersey.internal.spi.AutoDiscoverable",
          "org.glassfish.jersey.internal.util.PropertiesHelper",
          "org.javamoney.moneta.Money",
          "org.springframework.core.MethodParameter",
          "org.springframework.core.ResolvableType",
          "org.springframework.data.redis.serializer.RedisSerializer",
          "org.springframework.data.redis.serializer.SerializationException",
          "org.springframework.http.HttpHeaders",
          "org.springframework.http.HttpInputMessage",
          "org.springframework.http.HttpOutputMessage",
          "org.springframework.http.MediaType",
          "org.springframework.http.converter.AbstractHttpMessageConverter",
          "org.springframework.http.converter.GenericHttpMessageConverter",
          "org.springframework.http.converter.HttpMessageNotReadableException",
          "org.springframework.http.converter.HttpMessageNotWritableException",
          "org.springframework.http.server.ServerHttpRequest",
          "org.springframework.http.server.ServerHttpResponse",
          "org.springframework.http.server.ServletServerHttpRequest",
          "org.springframework.messaging.Message",
          "org.springframework.messaging.MessageHeaders",
          "org.springframework.messaging.converter.AbstractMessageConverter",
          "org.springframework.util.Assert",
          "org.springframework.util.CollectionUtils",
          "org.springframework.util.MimeType",
          "org.springframework.util.ObjectUtils",
          "org.springframework.util.StringUtils",
          "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice",
          "org.springframework.web.servlet.view.AbstractView",
          "org.springframework.web.socket.sockjs.frame.AbstractSockJsMessageCodec",
          "retrofit2.Converter",
          "retrofit2.Converter\$Factory",
          "retrofit2.Retrofit",
          "springfox.documentation.spring.web.json.Json",
          "com.fasterxml.jackson.databind.JsonNode",
          "com.fasterxml.jackson.databind.ObjectMapper",
          "com.fasterxml.jackson.databind.node.ArrayNode",
          "com.fasterxml.jackson.databind.node.BinaryNode",
          "com.fasterxml.jackson.databind.node.BooleanNode",
          "com.fasterxml.jackson.databind.node.DoubleNode",
          "com.fasterxml.jackson.databind.node.IntNode",
          "com.fasterxml.jackson.databind.node.JsonNodeFactory",
          "com.fasterxml.jackson.databind.node.JsonNodeType",
          "com.fasterxml.jackson.databind.node.LongNode",
          "com.fasterxml.jackson.databind.node.NullNode",
          "com.fasterxml.jackson.databind.node.ObjectNode",
          "com.fasterxml.jackson.databind.node.ShortNode",
          "com.fasterxml.jackson.databind.node.TextNode",
          "com.github.luben.zstd.RecyclingBufferPool",
          "com.github.luben.zstd.ZstdInputStreamNoFinalizer",
          "com.github.luben.zstd.ZstdOutputStreamNoFinalizer",
          "net.jpountz.lz4.LZ4Compressor",
          "net.jpountz.lz4.LZ4Factory",
          "net.jpountz.lz4.LZ4SafeDecompressor",
          "net.jpountz.util.SafeUtils",
          "net.jpountz.xxhash.XXHash32",
          "net.jpountz.xxhash.XXHashFactory",
          "org.slf4j.ext.EventData",
          "org.xerial.snappy.SnappyInputStream",
          "org.xerial.snappy.SnappyOutputStream"
  )
}

tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

test {
  systemProperty 'tests.security.manager', 'false'
}

internalClusterTest {
  maxParallelForks = '1'
  final String enableInternalClusterTest = System.getProperty("tests.enable.internal.test", null);
  if (enableInternalClusterTest == null) {
    enabled = false
  } else {
    systemProperty 'tests.security.manager', 'false'
  }
}

tasks.withType(Test) {
  maxParallelForks = 1
}

tasks.named("processResources") {
  duplicatesStrategy = 'include'
}

tasks.named("sourcesJar") {
  duplicatesStrategy = 'include'
}

tasks.named("javadoc").configure { enabled = false }

sourceSets {
  main {
    proto {
      srcDir 'src/main/proto'
    }
    java {
      srcDir 'src/main/java'
    }
  }
}

protobuf {
  // Configure the protoc executable
  protoc {
    path = '/usr/local/bin/protoc'
    // Download from repositories
    artifact = 'com.google.protobuf:protoc:3.17.3'
  }
  generateProtoTasks {
    // all() returns the collection of all protoc tasks
    all().each { task ->
      // Here you can configure the task
    }

    // In addition to all(), you may get the task collection by various
    // criteria:

    // (Java only) returns tasks for a sourceSet
    ofSourceSet('main')

  }
}

javaRestTest {
  maxParallelForks = '1'
  final String cluster = System.getProperty("tests.rest.cluster", null);
  if (cluster == null) {
    enabled = false
  } else {
    systemProperty "tests.cluster", cluster
    systemProperty "tests.clustername", cluster
  }
}