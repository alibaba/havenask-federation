/*
*Copyright (c) 2021, Alibaba Group;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*
* Modifications Copyright Havenask Contributors. See
* GitHub history for details.
*/

import org.havenask.gradle.info.BuildParams
import org.jetbrains.gradle.ext.Remote
import org.jetbrains.gradle.ext.JUnit

import java.nio.file.Files

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:0.7"
  }
}

allprojects {
  apply plugin: 'idea'

  tasks.named('idea').configure {
    doFirst { throw new GradleException("Use of the 'idea' task has been deprecated. For details on importing into IntelliJ see CONTRIBUTING.md.") }
  }
}

// Applying this stuff, particularly the idea-ext plugin, has a cost so avoid it unless we're running in the IDE
if (System.getProperty('idea.active') == 'true') {
  apply plugin: org.jetbrains.gradle.ext.IdeaExtPlugin

  tasks.register('configureIdeaGradleJvm') {
    group = 'ide'
    description = 'Configures the appropriate JVM for Gradle'

    doLast {
      if (Files.exists(project.file('.idea/gradle.xml').toPath())) {
        modifyXml('.idea/gradle.xml') { xml ->
          def gradleSettings = xml.component.find { it.'@name' == 'GradleSettings' }.option[0].GradleProjectSettings
          // Remove configured JVM option to force IntelliJ to use the project JDK for Gradle
          gradleSettings.option.findAll { it.'@name' == 'gradleJvm' }.each { it.parent().remove(it) }
        }
      } else if (Files.exists(project.file('../.idea/gradle.xml').toPath())) {
        modifyXml('../.idea/gradle.xml') { xml ->
          def gradleSettings = xml.component.find { it.'@name' == 'GradleSettings' }.option[0].GradleProjectSettings
          // Remove configured JVM option to force IntelliJ to use the project JDK for Gradle
          gradleSettings.option.findAll { it.'@name' == 'gradleJvm' }.each { it.parent().remove(it) }
        }
      }
    }
  }

  idea {
    project {
      vcs = 'Git'
      jdkName = BuildParams.minimumCompilerVersion.majorVersion

      settings {
        delegateActions {
          delegateBuildRunToGradle = false
          testRunner = 'choose_per_test'
        }
        taskTriggers {
          afterSync tasks.named('configureIdeaGradleJvm')
        }
        codeStyle {
          java {
            classCountToUseImportOnDemand = 999
          }
        }
        encodings {
          encoding = 'UTF-8'
        }
        compiler {
          parallelCompilation = true
          processHeapSize = 2048
          addNotNullAssertions = false
          javac {
            generateDeprecationWarnings = false
            preferTargetJDKCompiler = false
          }
        }
        runConfigurations {
          defaults(JUnit) {
            vmParameters = '-ea -Djava.locale.providers=SPI,COMPAT'
          }
        }
        copyright {
          useDefault = 'Apache'
          profiles {
            Apache {
              keyword = 'Copyright (c) 2021, Alibaba Group;'
              notice = '''\
              Copyright (c) 2021, Alibaba Group;
              Licensed under the Apache License, Version 2.0 (the "License");
              you may not use this file except in compliance with the License.
              You may obtain a copy of the License at
                 http://www.apache.org/licenses/LICENSE-2.0
              Unless required by applicable law or agreed to in writing, software
              distributed under the License is distributed on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
              See the License for the specific language governing permissions and
              limitations under the License.
              '''.stripIndent()
            }
          }
        }
      }
    }
  }
}

/**
 * Parses a given XML file, applies a set of changes, and writes those changes back to the original file.
 *
 * @param path Path to existing XML file
 * @param action Action to perform on parsed XML document
 */
void modifyXml(Object path, Action<? super Node> action) {
  File xmlFile = project.file(path)
  Node xml = new XmlParser().parse(xmlFile)
  action.execute(xml)

  xmlFile.withPrintWriter { writer ->
    new XmlNodePrinter(writer).print(xml)
  }
}
