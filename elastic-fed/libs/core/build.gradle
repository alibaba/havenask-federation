/* 
*Copyright (c) 2021, Alibaba Group;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*
* Modifications Copyright Havenask Contributors. See
* GitHub history for details.
*/

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.havenask.gradle.info.BuildParams

apply plugin: 'nebula.optional-base'
apply plugin: 'havenask.publish'

archivesBaseName = 'havenask-core'

// we want to keep the JDKs in our IDEs set to JDK 8 until minimum JDK is bumped to 11 so we do not include this source set in our IDEs
if (!isEclipse) {
  sourceSets {
    java11 {
      java {
        srcDirs = ['src/main/java11']
      }
    }
  }

  configurations {
    java11Compile.extendsFrom(compile)
  }

  dependencies {
    java11Implementation sourceSets.main.output
  }

  compileJava11Java {
    sourceCompatibility = 11
    targetCompatibility = 11
  }

  forbiddenApisJava11 {
    if (BuildParams.runtimeJavaVersion < JavaVersion.VERSION_11) {
      targetCompatibility = JavaVersion.VERSION_11.getMajorVersion()
    }
    replaceSignatureFiles 'jdk-signatures'
  }

  jar {
    metaInf {
      into 'versions/11'
      from sourceSets.java11.output
    }
    manifest.attributes('Multi-Release': 'true')
  }
}

dependencies {
  // This dependency is used only by :libs:core for null-checking interop with other tools
  compileOnly "com.google.code.findbugs:jsr305:3.0.2"

  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"

  testImplementation(project(":test:framework")) {
    exclude group: 'org.havenask', module: 'havenask-core'
  }
}

tasks.named('forbiddenApisMain').configure {
  // :libs:havenask-core does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to server
  replaceSignatureFiles 'jdk-signatures'
}

thirdPartyAudit.ignoreMissingClasses(
  // from log4j
  'org/osgi/framework/AdaptPermission',
  'org/osgi/framework/AdminPermission',
  'org/osgi/framework/Bundle',
  'org/osgi/framework/BundleActivator',
  'org/osgi/framework/BundleContext',
  'org/osgi/framework/BundleEvent',
  'org/osgi/framework/SynchronousBundleListener',
  'org/osgi/framework/wiring/BundleWire',
  'org/osgi/framework/wiring/BundleWiring'
)
