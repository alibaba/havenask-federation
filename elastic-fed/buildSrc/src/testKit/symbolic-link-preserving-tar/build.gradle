/* 
*Copyright (c) 2021, Alibaba Group;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*
* Modifications Copyright Havenask Contributors. See
* GitHub history for details.
*/

import org.havenask.gradle.tar.SymbolicLinkPreservingTar

plugins {
  id 'base'
  id 'distribution'
  id 'havenask.symbolic-link-preserving-tar'
}

final String source = Objects.requireNonNull(System.getProperty('tests.symbolic_link_preserving_tar_source'))
boolean preserveFileTimestamps;
final String testPreserveFileTimestamps =
  Objects.requireNonNull(System.getProperty('tests.symbolic_link_preserving_tar_preserve_file_timestamps'))
switch (testPreserveFileTimestamps) {
  case "true":
    preserveFileTimestamps = true
    break
  case "false":
    preserveFileTimestamps = false
    break
  default:
    throw new IllegalArgumentException(
      "tests.symbolic_link_preserving_tar_preserve_file_timestamps must be [true] or [false] but was ["
        + testPreserveFileTimestamps + "]")
}

tasks.register("buildBZip2Tar", SymbolicLinkPreservingTar) { SymbolicLinkPreservingTar tar ->
  tar.archiveExtension = 'tar.bz2'
  tar.compression = Compression.BZIP2
  tar.preserveFileTimestamps = preserveFileTimestamps
  from fileTree(source)
  doLast {
    println archiveFile.get().asFile.path
  }
}

tasks.register("buildGZipTar", SymbolicLinkPreservingTar) { SymbolicLinkPreservingTar tar ->
  tar.archiveExtension = 'tar.gz'
  tar.compression = Compression.GZIP
  tar.preserveFileTimestamps = preserveFileTimestamps
  from fileTree(source)
  doLast {
    println archiveFile.get().asFile.path
  }
}

tasks.register("buildTar", SymbolicLinkPreservingTar) { SymbolicLinkPreservingTar tar ->
  tar.archiveExtension = 'tar'
  tar.preserveFileTimestamps = preserveFileTimestamps
  from fileTree(source)
  doLast {
    println archiveFile.get().asFile.path
  }
}
