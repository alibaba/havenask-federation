#!/bin/bash

set -e -o pipefail

CDPATH=""

SCRIPT="$0"

# SCRIPT might be an arbitrarily deep series of symbolic links; loop until we
# have the concrete path
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

# determine Havenask home; to do this, we strip from the path until we find
# bin, and then strip bin (there is an assumption here that there is no nested
# directory under bin also named bin)
HAVENASK_HOME=`dirname "$SCRIPT"`

# now make HAVENASK_HOME absolute
HAVENASK_HOME=`cd "$HAVENASK_HOME"; pwd`

while [ "`basename "$HAVENASK_HOME"`" != "bin" ]; do
  HAVENASK_HOME=`dirname "$HAVENASK_HOME"`
done
HAVENASK_HOME=`dirname "$HAVENASK_HOME"`

# now set the classpath
HAVENASK_CLASSPATH="$HAVENASK_HOME/lib/*"

# now set the path to java
if [ ! -z "$JAVA_HOME" ]; then
  JAVA="$JAVA_HOME/bin/java"
  JAVA_TYPE="JAVA_HOME"
else
  if [ "$(uname -s)" = "Darwin" ]; then
    # macOS has a different structure
    JAVA="$HAVENASK_HOME/jdk.app/Contents/Home/bin/java"
  else
    JAVA="$HAVENASK_HOME/jdk/bin/java"
  fi
  JAVA_TYPE="bundled jdk"
fi

if [ ! -x "$JAVA" ]; then
    echo "could not find java in $JAVA_TYPE at $JAVA" >&2
    exit 1
  fi

# do not let JAVA_TOOL_OPTIONS slip in (as the JVM does by default)
if [ ! -z "$JAVA_TOOL_OPTIONS" ]; then
  echo "warning: ignoring JAVA_TOOL_OPTIONS=$JAVA_TOOL_OPTIONS"
  unset JAVA_TOOL_OPTIONS
fi

# JAVA_OPTS is not a built-in JVM mechanism but some people think it is so we
# warn them that we are not observing the value of $JAVA_OPTS
if [ ! -z "$JAVA_OPTS" ]; then
  echo -n "warning: ignoring JAVA_OPTS=$JAVA_OPTS; "
  echo "pass JVM parameters via HAVENASK_JAVA_OPTS"
fi

if [[ "$("$JAVA" -version 2>/dev/null)" =~ "Unable to map CDS archive" ]]; then
  XSHARE="-Xshare:off"
else
  XSHARE="-Xshare:auto"
fi

# check the Java version
"$JAVA" "$XSHARE" -cp "$HAVENASK_CLASSPATH" org.havenask.tools.java_version_checker.JavaVersionChecker

export HOSTNAME=$HOSTNAME

${source.path.env}

if [ -z "$HAVENASK_PATH_CONF" ]; then
  echo "HAVENASK_PATH_CONF must be set to the configuration path"
  exit 1
fi

# now make HAVENASK_PATH_CONF absolute
HAVENASK_PATH_CONF=`cd "$HAVENASK_PATH_CONF"; pwd`

HAVENASK_DISTRIBUTION_TYPE=${havenask.distribution.type}
HAVENASK_BUNDLED_JDK=${havenask.bundled_jdk}

if [[ "$HAVENASK_BUNDLED_JDK" == "false" ]]; then
  echo "warning: no-jdk distributions that do not bundle a JDK are deprecated and will be removed in a future release" >&2
fi

if [[ "$HAVENASK_DISTRIBUTION_TYPE" == "docker" ]]; then
  # Allow environment variables to be set by creating a file with the
  # contents, and setting an environment variable with the suffix _FILE to
  # point to it. This can be used to provide secrets to a container, without
  # the values being specified explicitly when running the container.
  source "$HAVENASK_HOME/bin/havenask-env-from-file"

  # Parse Docker env vars to customize Havenask
  #
  # e.g. Setting the env var cluster.name=testcluster
  #
  # will cause Havenask to be invoked with -Ecluster.name=testcluster
  #
  # see https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html#_setting_default_settings

  declare -a havenask_arg_array

  while IFS='=' read -r envvar_key envvar_value
  do
    # Havenask settings need to have at least two dot separated lowercase
    # words, e.g. `cluster.name`
    if [[ "$envvar_key" =~ ^[a-z0-9_]+\.[a-z0-9_]+ ]]; then
      if [[ ! -z $envvar_value ]]; then
        havenask_opt="-E${envvar_key}=${envvar_value}"
        havenask_arg_array+=("${havenask_opt}")
      fi
    fi
  done < <(env)

  # Reset the positional parameters to the havenask_arg_array values and any existing positional params
  set -- "$@" "${havenask_arg_array[@]}"

  # The virtual file /proc/self/cgroup should list the current cgroup
  # membership. For each hierarchy, you can follow the cgroup path from
  # this file to the cgroup filesystem (usually /sys/fs/cgroup/) and
  # introspect the statistics for the cgroup for the given
  # hierarchy. Alas, Docker breaks this by mounting the container
  # statistics at the root while leaving the cgroup paths as the actual
  # paths. Therefore, Havenask provides a mechanism to override
  # reading the cgroup path from /proc/self/cgroup and instead uses the
  # cgroup path defined the JVM system property
  # havenask.cgroups.hierarchy.override. Therefore, we set this value here so
  # that cgroup statistics are available for the container this process
  # will run in.
  export HAVENASK_JAVA_OPTS="-Dhavenask.cgroups.hierarchy.override=/ $HAVENASK_JAVA_OPTS"
fi

cd "$HAVENASK_HOME"
