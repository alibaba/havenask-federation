/* 
*Copyright (c) 2021, Alibaba Group;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*
* Modifications Copyright Havenask Contributors. See
* GitHub history for details.
*/

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin:"havenask.internal-distribution-bwc-setup"

import org.havenask.gradle.Version
import org.havenask.gradle.info.BuildParams


BuildParams.getBwcVersions().forPreviousUnreleased { unreleasedVersion ->
    project(unreleasedVersion.gradleProjectPath) {
        Version currentVersion = Version.fromString(version)
        TaskProvider<Task> resolveAllBwcDepsTaskProvider = bwcSetup.bwcTask("resolveAllBwcDependencies") {
            t -> t.args("resolveAllDependencies")
        }
        if (currentVersion.getMinor() == 0 && currentVersion.getRevision() == 0) {
            // We only want to resolve dependencies for live versions of master, without cascading this to older versions
            tasks.named("resolveAllDependencies").configure {
                dependsOn(resolveAllBwcDepsTaskProvider)
            }
        }
    }
}
